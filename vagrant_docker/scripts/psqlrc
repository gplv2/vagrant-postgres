\set QUIET 1

\set PROMPT1 '%[%033[1;31m%]%M%[%033[0m%]:%[%033[1;31m%]%>%[%033[0m%] %n@%/%R%#%x '

\set PROMPT2 '%M %n@%/%R %# '

\pset null '[null]'
\pset pager off

\set COMP_KEYWORD_CASE upper

\timing

\set HISTSIZE 9000

\x auto

\set VERBOSITY verbose

\set QUIET 0

\echo 'How may I serve you, my prince of darkness - BOFH PostgreSQL!\n'

\echo 'Type :version to see the PostgreSQL version.' 
\echo '     :extensions to see the available extensions.'
\echo '     :processlist to see the running processes.'
\echo '     :duplicateindexes to see the duplicate indexes'
\echo '     :unusedindexes to see the unused indexes.'
\echo '     :alldbsizes to see the sizes of all databases.'
\echo '     :indexinfo to see some index stats of all tables in the current database.'
\echo '     :indexusageinfo / :indexusageinfobysize to see size/usage index stats'
\echo '     :findmissingindexes to scan for tables that might use an extra index'
\echo '     :uptime for server uptime'
\echo '     :clear for clearing the screen'
\echo '\nOr type \\q to exit. \n'

\set version 'SELECT version();'
\set extensions 'select * from pg_available_extensions;'
\set processlist 'select * from pg_stat_activity WHERE state <> \'idle\';'
\set duplicateindexes 'SELECT indrelid::regclass AS TableName ,array_agg(indexrelid::regclass) AS Indexes FROM pg_index GROUP BY indrelid ,indkey HAVING COUNT(*) > 1;'
\set unusedindexes 'SELECT PSUI.indexrelid::regclass AS IndexName ,PSUI.relid::regclass AS TableName FROM pg_stat_user_indexes AS PSUI    JOIN pg_index AS PI ON PSUI.IndexRelid = PI.IndexRelid WHERE PSUI.idx_scan = 0 AND PI.indisunique IS FALSE;'
\set alldbsizes 'SELECT datname, pg_size_pretty(pg_database_size(datname)) from pg_database order by pg_database_size(datname) desc;'

\set indexinfo 'SELECT pg_class.relname, pg_size_pretty(pg_class.reltuples::BIGINT) AS rows_in_bytes, pg_class.reltuples AS num_rows, COUNT(indexname) AS number_of_indexes, CASE WHEN x.is_unique = 1 THEN \'Y\' ELSE \'N\' END AS UNIQUE, SUM(CASE WHEN number_of_columns = 1 THEN 1 ELSE 0 END) AS single_column, SUM(CASE WHEN number_of_columns IS NULL THEN 0 WHEN number_of_columns = 1 THEN 0 ELSE 1 END) AS multi_column FROM pg_namespace LEFT OUTER JOIN pg_class ON pg_namespace.oid = pg_class.relnamespace LEFT OUTER JOIN (SELECT indrelid, MAX(CAST(indisunique AS INTEGER)) AS is_unique FROM pg_index GROUP BY indrelid) x ON pg_class.oid = x.indrelid LEFT OUTER JOIN ( SELECT c.relname AS ctablename, ipg.relname AS indexname, x.indnatts AS number_of_columns FROM pg_index x JOIN pg_class c ON c.oid = x.indrelid JOIN pg_class ipg ON ipg.oid = x.indexrelid  ) AS foo ON pg_class.relname = foo.ctablename WHERE pg_namespace.nspname=\'public\' AND  pg_class.relkind = \'r\' GROUP BY pg_class.relname, pg_class.reltuples, x.is_unique ORDER BY 2;'

\set indexusageinfo 'SELECT t.tablename, indexname, c.reltuples AS num_rows, pg_size_pretty(pg_relation_size(quote_ident(t.tablename)::text)) AS table_size, pg_size_pretty(pg_relation_size(quote_ident(indexrelname)::text)) AS index_size, CASE WHEN indisunique THEN \'Y\' ELSE \'N\' END AS UNIQUE, idx_scan AS number_of_scans, idx_tup_read AS tuples_read, idx_tup_fetch AS tuples_fetched FROM pg_tables t LEFT OUTER JOIN pg_class c ON t.tablename=c.relname LEFT OUTER JOIN ( SELECT c.relname AS ctablename, ipg.relname AS indexname, x.indnatts AS number_of_columns, idx_scan, idx_tup_read, idx_tup_fetch, indexrelname, indisunique FROM pg_index x JOIN pg_class c ON c.oid = x.indrelid JOIN pg_class ipg ON ipg.oid = x.indexrelid JOIN pg_stat_all_indexes psai ON x.indexrelid = psai.indexrelid ) AS foo ON t.tablename = foo.ctablename WHERE t.schemaname=\'public\' ORDER BY tablename,number_of_scans desc, tuples_read desc, tuples_fetched desc;'

\set indexusageinfobysize 'SELECT t.tablename, indexname, c.reltuples AS num_rows, pg_size_pretty(pg_relation_size(quote_ident(t.tablename)::text)) AS table_size, pg_size_pretty(pg_relation_size(quote_ident(indexrelname)::text)) AS index_size, CASE WHEN indisunique THEN \'Y\' ELSE \'N\' END AS UNIQUE, idx_scan AS number_of_scans, idx_tup_read AS tuples_read, idx_tup_fetch AS tuples_fetched FROM pg_tables t LEFT OUTER JOIN pg_class c ON t.tablename=c.relname LEFT OUTER JOIN ( SELECT c.relname AS ctablename, ipg.relname AS indexname, x.indnatts AS number_of_columns, idx_scan, idx_tup_read, idx_tup_fetch, indexrelname, indisunique FROM pg_index x JOIN pg_class c ON c.oid = x.indrelid JOIN pg_class ipg ON ipg.oid = x.indexrelid JOIN pg_stat_all_indexes psai ON x.indexrelid = psai.indexrelid ) AS foo ON t.tablename = foo.ctablename WHERE t.schemaname=\'public\' AND c.reltuples >0 ORDER BY num_rows desc, tablename,number_of_scans desc, tuples_read desc, tuples_fetched;'

\set findmissingindexes 'SELECT schemaname, relname, seq_scan-idx_scan AS too_much_seq, case when seq_scan-idx_scan>0 THEN \'Missing Index?\' ELSE \'OK\' END, pg_relation_size(format(\'%I.%I\', schemaname, relname)::regclass) AS rel_size, seq_scan, idx_scan FROM pg_stat_user_tables WHERE pg_relation_size(format(\'%I.%I\', schemaname, relname)::regclass)>80000 ORDER BY too_much_seq DESC;'

\set uptime 'select now() - backend_start as uptime from pg_stat_activity where pid = pg_backend_pid();'

\set clear '\\! clear;'

