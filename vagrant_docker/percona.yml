---
- hosts: all
  become: true
  become_user: root
  remote_user: vagrant
  gather_facts: true
  gather_subset:
    - "all_ipv4_addresses"
  vars_files:
    - vars.yml

  pre_tasks:
    - name: Print all available facts
      ansible.builtin.debug:
        var: ansible_facts

    - name: Read an ini file with IPs written by vagrant (nodes)
      ansible.builtin.debug:
        msg: "{{ lookup('ini', 'db1 section=nodes file=nodes.ini default=''') }}"

    - name: Update apt repo and cache on Ubuntu box
      apt:
        update_cache: yes
        force_apt_get: yes
        cache_valid_time: 3600

    - name: Upgrade all packages on servers
      apt:
        upgrade: dist
        force_apt_get: yes

    - name: Install required packages
      apt:
        name:
          - wget
          - python3-psycopg2
          - acl
        state: latest

    - name: Install repo and deb files for percona
      become: yes
      block:
        - name: Download percona repo
          get_url:
            url: "https://repo.percona.com/apt/percona-release_latest.generic_all.deb"
            dest: /home/vagrant
          when: ansible_os_family == "Debian"

        - name: Install percona repo
          apt:
            deb: /home/vagrant/percona-release_latest.generic_all.deb
          when: ansible_os_family == "Debian"

        - name: Update and upgrade apt packages for percona
          apt:
            update_cache: yes
          when: ansible_os_family == "Debian"

    - name: Select Percona release
      shell: |
        export DEBIAN_FRONTEND=noninteractive &&
        percona-release enable-only pxc-80 release &&
        percona-release enable tools release

    - name: Install Percona Percona XtraDB Cluster
      apt:
        update_cache: yes
        force_apt_get: yes
        cache_valid_time: 3600
        name:
          - percona-xtradb-cluster
          - percona-xtradb-cluster-client
          - percona-xtradb-cluster-server
        state: present

    - name: Copy shared CA KEY file
      ansible.builtin.copy:
        src: ca-key.pem
        dest: /var/lib/mysql/
        owner: mysql
        group: mysql
        mode: '0600'
    - name: Copy shared CA PEM file
      ansible.builtin.copy:
        src: ca.pem
        dest: /var/lib/mysql/
        owner: mysql
        group: mysql
        mode: '0644'
    - name: Copy shared Client CERT file
      ansible.builtin.copy:
        src: client-cert.pem
        dest: /var/lib/mysql/
        owner: mysql
        group: mysql
        mode: '0644'
    - name: Copy shared Client KEY file
      ansible.builtin.copy:
        src: client-key.pem
        dest: /var/lib/mysql/
        owner: mysql
        group: mysql
        mode: '0600'
    - name: Copy shared(all nodes) private KEY file
      ansible.builtin.copy:
        src: private_key.pem
        dest: /var/lib/mysql/
        owner: mysql
        group: mysql
        mode: '0600'
    - name: Copy shared(all nodes) public KEY file
      ansible.builtin.copy:
        src: public_key.pem
        dest: /var/lib/mysql/
        owner: mysql
        group: mysql
        mode: '0644'
    - name: Copy shared(all nodes) server CERT file
      ansible.builtin.copy:
        src: server-cert.pem
        dest: /var/lib/mysql/
        owner: mysql
        group: mysql
        mode: '0644'
    - name: Copy shared(all nodes) server KEY file
      ansible.builtin.copy:
        src: server-key.pem
        dest: /var/lib/mysql/
        owner: mysql
        group: mysql
        mode: '0600'

    - name: Stop the DB service to setup cluster
      service: name={{ item }} state=stopped enabled=yes
      with_items:
        - mysql

    - name: Bootstrap | ensure bootstrap service is started on first DB node
      shell: systemctl start mysql@bootstrap.service
      async: 300
      poll: 5
      when:
        - inventory_hostname == 'db1'
      register: result

    - name: Start and enable services
      service: name={{ item }} state=started enabled=yes
      with_items:
        - mysql
      when:
        - inventory_hostname != 'db1'

    - name: Set percona config variable
      lineinfile:
         path: /etc/mysql/mysql.conf.d/mysqld.cnf
         regexp: '^wsrep_cluster_address'
         line: 'wsrep_cluster_address=gcomm://192.168.88.11,192.168.88.12,192.168.88.13'
         backup: yes

    - name: Set percona config variable
      lineinfile:
         path: /etc/mysql/mysql.conf.d/mysqld.cnf
         regexp: '^wsrep_node_address'
         line: "wsrep_node_address={{ lookup('ansible.builtin.ini', inventory_hostname, file='nodes.ini', section='nodes', allow_no_value=True) }}"

    - name: Set percona config variable
      lineinfile:
         path: /etc/mysql/mysql.conf.d/mysqld.cnf
         regexp: '^pxc_encrypt_cluster_traffic'
         line: 'pxc_encrypt_cluster_traffic=ON'

    - name: Set percona config variable
      lineinfile:
        path: /etc/mysql/mysql.conf.d/mysqld.cnf
        regexp: '^wsrep_provider_options'
        line: 'wsrep_provider_options="socket.ssl_key=server-key.pem;socket.ssl_cert=server-cert.pem;socket.ssl_ca=ca.pem"'

    - name: Set percona config variable
      lineinfile:
        path: /etc/mysql/mysql.conf.d/mysqld.cnf
        regexp: '^wsrep_node_name=pxc-cluster-node'
        line: 'wsrep_node_name=pxc-cluster-{{ play_hosts.index(inventory_hostname)+1 }}'

    - name: Set percona config variable
      lineinfile:
        path: /etc/mysql/mysql.conf.d/mysqld.cnf
        regexp: '^wsrep_cluster_conf_id=1'
        line: 'wsrep_cluster_conf_id={{ play_hosts.index(inventory_hostname)+1 }}'

    - name: Set percona config variable
      lineinfile:
        path: /etc/mysql/mysql.conf.d/mysqld.cnf
        regexp: '^server-id'
        line: 'server-id={{ play_hosts.index(inventory_hostname)+1 }}'

    - name: Append sst block in mysql conf
      ansible.builtin.blockinfile:
        path: /etc/mysql/mysql.conf.d/mysqld.cnf
        block: |
          [sst]
          encrypt=4
          ssl-key=server-key.pem
          ssl-ca=ca.pem
          ssl-cert=server-cert.pem
        marker: "# {mark} ANSIBLE MANAGED BLOCK "

  handlers:
    - name: Restart Percona mysql
      service: name=mysql state=restarted

- name: Verify
  hosts: all
  tasks:
    - name: Make sure we can connect to MySQL via Unix socket.
      command: "mysql -u root -e 'show databases;'"
      become: true
      changed_when: false

    - name: Testing for TCP port 3306 to become open on the host, don't start checking for 2 seconds
      ansible.builtin.wait_for:
        port: 3306
        delay: 2

    - name: Show server status
      block:
        - command: "mysql -u root -NBe 'status'"
          become: true
          changed_when: false
          register: mysql_status
        - debug:
            var: mysql_status.stdout


    - name: Append sst block in mysql conf
      ansible.builtin.blockinfile:
        path: /etc/mysql/mysql.conf.d/mysqld.cnf
        block: |
          [sst]
          encrypt=4
          ssl-key=server-key.pem
          ssl-ca=ca.pem
          ssl-cert=server-cert.pem
        marker: "# {mark} ANSIBLE MANAGED BLOCK "

  handlers:
    - name: Restart Percona mysql
      service: name=mysql state=restarted

- name: Verify
  hosts: all
  tasks:
    - name: Make sure we can connect to MySQL via Unix socket.
      command: "mysql -u root -e 'show databases;'"
      become: true
      changed_when: false

    - name: Testing for TCP port 3306 to become open on the host, don't start checking for 2 seconds
      ansible.builtin.wait_for:
        port: 3306
        delay: 2

    - name: Show server status
      block:
        - command: "mysql -u root -NBe 'status'"
          become: true
          changed_when: false
          register: mysql_status
        - debug:
            var: mysql_status.stdout

